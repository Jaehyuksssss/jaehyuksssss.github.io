-- Create table to log reaction game sessions (start/end events)
create table if not exists public.reaction_sessions (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  session_id text,
  client_id text,
  event text check (event in ('start','end')) not null,
  difficulty text check (difficulty in ('easy','medium','hard')),
  rounds int,
  avg_ms int,
  hits int,
  times_ms jsonb,
  time_limit_sec int,
  initial_grid int,
  started_at_ms bigint,
  ended_at_ms bigint,
  user_agent text,
  path text
);

-- Performance indexes for analytics
create index if not exists idx_reaction_sessions_created_at on public.reaction_sessions (created_at desc);
create index if not exists idx_reaction_sessions_event on public.reaction_sessions (event);
create index if not exists idx_reaction_sessions_difficulty on public.reaction_sessions (difficulty);
create index if not exists idx_reaction_sessions_sid on public.reaction_sessions (session_id);

-- Enable RLS and allow anonymous inserts (adjust as needed)
alter table public.reaction_sessions enable row level security;

do $$ begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'reaction_sessions' and policyname = 'allow_anon_insert_reaction_sessions'
  ) then
    create policy allow_anon_insert_reaction_sessions on public.reaction_sessions
      for insert to anon with check (true);
  end if;
end $$;

-- Optional: read-only dev policy (remove in prod if undesired)
-- create policy allow_read_all_reaction_sessions on public.reaction_sessions for select using (true);

-- Example aggregations you can run in SQL editor:
-- 1) 총 플레이 수
--   select count(*) from public.reaction_sessions where event = 'start';
-- 2) 난이도별 종료 세션 통계
--   select difficulty,
--          count(*) as sessions,
--          avg(rounds) as avg_rounds,
--          percentile_disc(0.5) within group (order by avg_ms) as p50_avg_ms
--     from public.reaction_sessions
--    where event = 'end'
-- group by difficulty
-- order by difficulty;

