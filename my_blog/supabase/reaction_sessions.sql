-- Create table to log reaction game sessions (start/end events)
create table if not exists public.reaction_sessions (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  session_id text,
  client_id text,
  event text check (event in ('start','end')) not null,
  difficulty text check (difficulty in ('easy','medium','hard')),
  rounds int,
  avg_ms int,
  hits int,
  times_ms jsonb,
  time_limit_sec int,
  initial_grid int,
  started_at_ms bigint,
  ended_at_ms bigint,
  user_agent text,
  path text
);

-- Performance indexes for analytics
create index if not exists idx_reaction_sessions_created_at on public.reaction_sessions (created_at desc);
create index if not exists idx_reaction_sessions_event on public.reaction_sessions (event);
create index if not exists idx_reaction_sessions_difficulty on public.reaction_sessions (difficulty);
create index if not exists idx_reaction_sessions_sid on public.reaction_sessions (session_id);

-- Enable RLS and allow anonymous inserts (adjust as needed)
alter table public.reaction_sessions enable row level security;

do $$ begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public' and tablename = 'reaction_sessions' and policyname = 'allow_anon_insert_reaction_sessions'
  ) then
    create policy allow_anon_insert_reaction_sessions on public.reaction_sessions
      for insert to anon with check (true);
  end if;
end $$;

-- Optional: read-only dev policy (remove in prod if undesired)
-- create policy allow_read_all_reaction_sessions on public.reaction_sessions for select using (true);

-- ------------------------------------------------------------
-- Aggregated counters (by day x difficulty) maintained via trigger
-- ------------------------------------------------------------
create table if not exists public.reaction_counters_daily (
  day date not null,
  difficulty text check (difficulty in ('easy','medium','hard')) not null,
  starts bigint not null default 0,
  ends bigint not null default 0,
  total_rounds bigint not null default 0,
  sum_avg_ms bigint not null default 0,
  hits bigint not null default 0,
  primary key (day, difficulty)
);

create index if not exists idx_reaction_counters_daily_day on public.reaction_counters_daily (day desc);
create index if not exists idx_reaction_counters_daily_diff on public.reaction_counters_daily (difficulty);

alter table public.reaction_counters_daily enable row level security;
-- Optional read for dashboards
do $$ begin
  if not exists (
    select 1 from pg_policies
    where schemaname='public' and tablename='reaction_counters_daily' and policyname='allow_read_reaction_counters_daily'
  ) then
    create policy allow_read_reaction_counters_daily on public.reaction_counters_daily
      for select to anon, authenticated using (true);
  end if;
end $$;

-- 게임 총 횟수 테이블 (난이도 무관)
create table if not exists public.game_total_count (
  id bigint generated by default as identity primary key,
  total_games bigint not null default 0,
  last_updated timestamptz not null default now()
);

-- 초기값 설정 (테이블이 비어있을 때만)
insert into public.game_total_count (total_games) 
select 0 where not exists (select 1 from public.game_total_count);

-- 게임 시작할 때마다 총 횟수 증가하는 함수
create or replace function public.increment_total_game_count()
returns bigint
language plpgsql
security definer
set search_path = public
as $$
declare new_total bigint;
begin
  -- 테이블이 비어있으면 초기값 삽입
  if not exists (select 1 from public.game_total_count) then
    insert into public.game_total_count (total_games) values (1);
    return 1;
  end if;
  
  -- 기존 레코드 업데이트
  update public.game_total_count 
  set total_games = total_games + 1, last_updated = now()
  returning total_games into new_total;
  
  return new_total;
end;
$$;

-- 권한 설정
revoke all on function public.increment_total_game_count() from public;
grant execute on function public.increment_total_game_count() to anon, authenticated;

-- RLS 활성화 및 정책 설정
alter table public.game_total_count enable row level security;

-- 읽기 전용 정책 (총 게임 횟수 조회용)
do $$ begin
  if not exists (
    select 1 from pg_policies
    where schemaname='public' and tablename='game_total_count' and policyname='allow_read_game_total_count'
  ) then
    create policy allow_read_game_total_count on public.game_total_count
      for select to anon, authenticated using (true);
  end if;
end $$;

-- 업데이트는 함수를 통해서만 가능 (increment_total_game_count 함수가 security definer로 실행)

-- ------------------------------------------------------------
-- Trigger: keep aggregates in sync when a session row is inserted
-- ------------------------------------------------------------
create or replace function public.fn_reaction_after_insert()
returns trigger
language plpgsql
security definer
set search_path = public
as $$
declare v_day date;
begin
  v_day := (new.created_at at time zone 'utc')::date;

  -- Upsert counters per day x difficulty
  if new.event = 'start' then
    insert into public.reaction_counters_daily(day, difficulty, starts)
    values (v_day, coalesce(new.difficulty, 'hard'), 1)
    on conflict (day, difficulty) do update
      set starts = public.reaction_counters_daily.starts + 1;

    -- Total game count
    perform public.increment_total_game_count();
  elsif new.event = 'end' then
    insert into public.reaction_counters_daily(day, difficulty, ends, total_rounds, sum_avg_ms, hits)
    values (v_day, coalesce(new.difficulty, 'hard'), 1, coalesce(new.rounds,0), coalesce(new.avg_ms,0), coalesce(new.hits,0))
    on conflict (day, difficulty) do update
      set ends = public.reaction_counters_daily.ends + 1,
          total_rounds = public.reaction_counters_daily.total_rounds + coalesce(new.rounds,0),
          sum_avg_ms = public.reaction_counters_daily.sum_avg_ms + coalesce(new.avg_ms,0),
          hits = public.reaction_counters_daily.hits + coalesce(new.hits,0);
  end if;

  return new;
end;
$$;

do $$ begin
  if not exists (
    select 1 from pg_trigger
    where tgname = 'tr_reaction_after_insert'
      and tgrelid = 'public.reaction_sessions'::regclass
  ) then
    create trigger tr_reaction_after_insert
      after insert on public.reaction_sessions
      for each row execute function public.fn_reaction_after_insert();
  end if;
end $$;

-- Example aggregations you can run in SQL editor:
-- 1) 총 플레이 수
--   select count(*) from public.reaction_sessions where event = 'start';
-- 2) 난이도별 종료 세션 통계
--   select difficulty,
--          count(*) as sessions,
--          avg(rounds) as avg_rounds,
--          percentile_disc(0.5) within group (order by avg_ms) as p50_avg_ms
--     from public.reaction_sessions
--    where event = 'end'
-- group by difficulty
-- order by difficulty;
-- 3) 총 게임 횟수 확인
--   select total_games, last_updated from public.game_total_count;

-- 4) 최근 7일 난이도별 카운트
--   select day, difficulty, starts, ends
--     from public.reaction_counters_daily
--    where day >= (current_date - interval '7 day')
-- order by day desc, difficulty;

-- 5) 난이도별 평균
--   select difficulty,
--          sum(total_rounds) as total_rounds,
--          sum(ends) as ended_sessions,
--          case when sum(ends) > 0 then round(sum(sum_avg_ms)::numeric / sum(ends)) else null end as avg_of_avg_ms
--     from public.reaction_counters_daily
-- group by difficulty
-- order by difficulty;
